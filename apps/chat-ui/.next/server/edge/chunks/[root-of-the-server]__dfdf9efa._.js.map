{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/chat-ui/src/instrumentation.ts"],"sourcesContent":["import * as Sentry from '@sentry/nextjs';\n\nconst sentryOptions: Sentry.NodeOptions | Sentry.EdgeOptions = {\n  // Sentry DSN\n  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n\n  // Enable Spotlight in development\n  spotlight: process.env.NODE_ENV === 'development',\n\n  // Adds request headers and IP for users, for more info visit\n  sendDefaultPii: true,\n\n  // Adjust this value in production, or use tracesSampler for greater control\n  tracesSampleRate: 1,\n\n  // Setting this option to true will print useful information to the console while you're setting up Sentry.\n  debug: false,\n};\n\nexport async function register() {\n  if (!process.env.NEXT_PUBLIC_SENTRY_DISABLED) {\n    if (process.env.NEXT_RUNTIME === 'nodejs') {\n    // Node.js Sentry configuration\n      Sentry.init(sentryOptions);\n    }\n\n    if (process.env.NEXT_RUNTIME === 'edge') {\n    // Edge Sentry configuration\n      Sentry.init(sentryOptions);\n    }\n  }\n}\n\nexport const onRequestError = Sentry.captureRequestError;\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,gBAAyD;IAC7D,aAAa;IACb,KAAK,QAAQ,GAAG,CAAC,sBAAsB;IAEvC,kCAAkC;IAClC,WAAW,oDAAyB;IAEpC,6DAA6D;IAC7D,gBAAgB;IAEhB,4EAA4E;IAC5E,kBAAkB;IAElB,2GAA2G;IAC3G,OAAO;AACT;AAEO,eAAe;IACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,2BAA2B,EAAE;QAC5C,uCAA2C;;QAG3C;QAEA,wCAAyC;YACzC,4BAA4B;YAC1B,CAAA,GAAA,sNAAA,CAAA,OAAW,AAAD,EAAE;QACd;IACF;AACF;AAEO,MAAM,iBAAiB,sNAAA,CAAA,sBAA0B"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/chat-ui/edge-wrapper.js"],"sourcesContent":["self._ENTRIES ||= {};\nconst modProm = import('MODULE');\nmodProm.catch(() => {});\nself._ENTRIES[\"middleware_instrumentation\"] = new Proxy(modProm, {\n    get(modProm, name) {\n        if (name === \"then\") {\n            return (res, rej) => modProm.then(res, rej);\n        }\n        let result = (...args) => modProm.then((mod) => (0, mod[name])(...args));\n        result.then = (res, rej) => modProm.then((mod) => mod[name]).then(res, rej);\n        return result;\n    },\n});\n"],"names":[],"mappings":"AAAA,KAAK,QAAQ,KAAK,CAAC;AACnB,MAAM;AACN,QAAQ,KAAK,CAAC,KAAO;AACrB,KAAK,QAAQ,CAAC,6BAA6B,GAAG,IAAI,MAAM,SAAS;IAC7D,KAAI,OAAO,EAAE,IAAI;QACb,IAAI,SAAS,QAAQ;YACjB,OAAO,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,KAAK;QAC3C;QACA,IAAI,SAAS,CAAC,GAAG,OAAS,QAAQ,IAAI,CAAC,CAAC,MAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK;QAClE,OAAO,IAAI,GAAG,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK;QACvE,OAAO;IACX;AACJ"}}]
}